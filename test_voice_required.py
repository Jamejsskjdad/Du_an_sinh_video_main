#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra t√≠nh nƒÉng b·∫Øt bu·ªôc gi·ªçng nh√¢n b·∫£n
"""

import os
import sys
sys.path.append('.')

from src.voice.store import has_voice, list_voices
from lecture_input import convert_text_to_audio_with_voice

def test_voice_required():
    print("üîç Testing voice required functionality...")
    
    # Test 1: Ki·ªÉm tra voice c√≥ t·ªìn t·∫°i
    user_id = "current_user"
    voice_id = "myVoice"
    
    print(f"üìÅ Checking voice: {user_id}/{voice_id}")
    print(f"‚úÖ Voice exists: {has_voice(user_id, voice_id)}")
    
    # Test 2: Test v·ªõi voice h·ª£p l·ªá
    print("\nüé§ Testing with valid voice...")
    test_text = "Xin ch√†o c√°c em, h√¥m nay ch√∫ng ta s·∫Ω h·ªçc b√†i m·ªõi."
    
    try:
        result = convert_text_to_audio_with_voice(test_text, user_id, voice_id)
        print(f"‚úÖ Success with valid voice: {result}")
    except Exception as e:
        print(f"‚ùå Error with valid voice: {e}")
    
    # Test 3: Test v·ªõi voice kh√¥ng t·ªìn t·∫°i
    print("\nüé§ Testing with invalid voice...")
    invalid_voice_id = "non_existent_voice"
    
    try:
        result = convert_text_to_audio_with_voice(test_text, user_id, invalid_voice_id)
        print(f"‚ùå Should have failed but didn't: {result}")
    except Exception as e:
        print(f"‚úÖ Correctly failed with invalid voice: {e}")
    
    # Test 4: Test v·ªõi voice_id = None
    print("\nüé§ Testing with None voice_id...")
    
    try:
        result = convert_text_to_audio_with_voice(test_text, user_id, None)
        print(f"‚ùå Should have failed but didn't: {result}")
    except Exception as e:
        print(f"‚úÖ Correctly failed with None voice_id: {e}")

if __name__ == "__main__":
    test_voice_required()

