import os
import zipfile
import subprocess
import tempfile
import logging

import gradio as gr
import xml.etree.ElementTree as ET
from shutil import which

from gtts import gTTS
from pptx import Presentation
from pdf2image import convert_from_path
from src.utils.math_formula_processor import MathFormulaProcessor, process_math_text

# Thi·∫øt l·∫≠p logging
logger = logging.getLogger(__name__)



def convert_pptx_to_images(pptx_path, dpi=220):
    # Ki·ªÉm tra LibreOffice
    if which("soffice") is None:
        raise RuntimeError("Kh√¥ng t√¨m th·∫•y LibreOffice (soffice). Vui l√≤ng c√†i LibreOffice ƒë·ªÉ chuy·ªÉn PPTX -> PDF.")

    tmpdir = tempfile.mkdtemp(prefix="pptx2img_")
    # Chuy·ªÉn PPTX -> PDF
    try:
        subprocess.run(
            ["soffice", "--headless", "--convert-to", "pdf", "--outdir", tmpdir, pptx_path],
            check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Chuy·ªÉn PPTX sang PDF th·∫•t b·∫°i: {e}")

    pdf_path = os.path.join(tmpdir, os.path.splitext(os.path.basename(pptx_path))[0] + ".pdf")
    if not os.path.exists(pdf_path):
        raise RuntimeError("Kh√¥ng t·∫°o ƒë∆∞·ª£c PDF t·ª´ PPTX. Ki·ªÉm tra file ƒë·∫ßu v√†o.")

    # PDF -> PNG (c·∫ßn Poppler)
    try:
        images = convert_from_path(pdf_path, dpi=dpi, output_folder=tmpdir, fmt='png')
    except Exception as e:
        raise RuntimeError("L·ªói convert PDF -> ·∫£nh. C√≥ th·ªÉ thi·∫øu Poppler (poppler-utils).") from e

    img_paths = []
    for i, img in enumerate(images, 1):
        img_path = os.path.join(tmpdir, f"slide-{i:02d}.png")
        img.save(img_path)
        img_paths.append(img_path)

    # Tr·∫£ v·ªÅ danh s√°ch ƒë∆∞·ªùng d·∫´n ·∫£nh theo th·ª© t·ª± slide
    return img_paths

def convert_text_to_audio(text, language='vi'):
    """
    Convert text to audio using gTTS
    Returns the path to the generated audio file
    """
    try:
        if not text or text.strip() == "":
            return None
        
        # Create a temporary file for the audio
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.mp3')
        temp_path = temp_file.name
        temp_file.close()
        
        # Convert text to speech
        tts = gTTS(text=text, lang=language, slow=False)
        tts.save(temp_path)
        
        # Return the audio file path directly for Gradio Audio component
        return temp_path
    except Exception as e:
        return None

def read_text_file(file):
    """
    Read text content from uploaded file
    """
    if file is None:
        return "", "‚ùå Vui l√≤ng ch·ªçn file vƒÉn b·∫£n!"
    
    try:
        # Get file extension
        file_path = file.name
        file_ext = os.path.splitext(file_path)[1].lower()
        
        # Check if it's a supported file type
        if file_ext not in ['.txt', '.md', '.doc', '.docx', '.rtf']:
            return "", "‚ùå Ch·ªâ h·ªó tr·ª£ file vƒÉn b·∫£n (.txt, .md, .doc, .docx, .rtf)"
        
        content = ""
        
        # Handle different file types
        if file_ext == '.docx':
            # For .docx files, we need to extract text properly
            try:
                import zipfile
                import xml.etree.ElementTree as ET
                
                # .docx is a ZIP file containing XML
                with zipfile.ZipFile(file_path, 'r') as zip_file:
                    # Find the document.xml file
                    if 'word/document.xml' in zip_file.namelist():
                        xml_content = zip_file.read('word/document.xml')
                        root = ET.fromstring(xml_content)
                        
                        # Extract text from all text elements
                        text_elements = []
                        for elem in root.iter():
                            if elem.text and elem.text.strip():
                                text_elements.append(elem.text.strip())
                        
                        content = ' '.join(text_elements)
                    else:
                        return "", "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung t·ª´ file .docx"
                        
            except Exception as e:
                return "", f"‚ùå L·ªói ƒë·ªçc file .docx: {str(e)}"
        
        elif file_ext == '.doc':
            # For .doc files, we'll try to read as text but warn user
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            except UnicodeDecodeError:
                try:
                    with open(file_path, 'r', encoding='latin-1') as f:
                        content = f.read()
                except:
                    return "", "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file .doc. Vui l√≤ng chuy·ªÉn ƒë·ªïi sang .txt ho·∫∑c .docx"
        
        else:
            # For .txt, .md, .rtf files
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            except UnicodeDecodeError:
                with open(file_path, 'r', encoding='latin-1') as f:
                    content = f.read()
        
        # Clean content - remove null bytes and other control characters
        content = ''.join(char for char in content if ord(char) >= 32 or char in '\n\r\t')
        
        # Strip whitespace and check if empty
        content = content.strip()
        if not content:
            return "", "‚ùå File vƒÉn b·∫£n tr·ªëng ho·∫∑c ch·ªâ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát!"
        
        return content, f"‚úÖ ƒê√£ ƒë·ªçc th√†nh c√¥ng file: {os.path.basename(file_path)} ({len(content)} k√Ω t·ª± th·ª±c t·∫ø)"
    
    except Exception as e:
        return "", f"‚ùå L·ªói ƒë·ªçc file: {str(e)}"

def extract_slides_from_pptx(pptx_file):
    slides_data = []
    image_paths = convert_pptx_to_images(pptx_file.name, dpi=220)
    
    # S·ª≠ d·ª•ng MathFormulaProcessor ƒë·ªÉ x·ª≠ l√Ω to√†n b·ªô PowerPoint
    math_processor = MathFormulaProcessor()
    processed_result = math_processor.process_powerpoint_text(pptx_file.name)
    
    if processed_result.get('error'):
        # N·∫øu c√≥ l·ªói, fallback v·ªÅ ph∆∞∆°ng ph√°p c≈©
        logger.warning(f"L·ªói x·ª≠ l√Ω c√¥ng th·ª©c to√°n h·ªçc: {processed_result['error']}, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c≈©")
        prs = Presentation(pptx_file.name)
        
        for i, slide in enumerate(prs.slides):
            text_chunks = []
            for shape in slide.shapes:
                if hasattr(shape, "text") and shape.text:
                    text_chunks.append(shape.text.strip())
            text = " ".join(filter(None, text_chunks))
            
            # V·∫´n x·ª≠ l√Ω k√Ω t·ª± ƒë·∫∑c bi·ªát c∆° b·∫£n
            processed_text = process_math_text(text.strip())
            
            slides_data.append({
                'slide_number': i + 1,
                'text': processed_text,
                'image_path': image_paths[i] if i < len(image_paths) else None,
                'has_math_objects': False
            })
    else:
        # S·ª≠ d·ª•ng k·∫øt qu·∫£ ƒë√£ x·ª≠ l√Ω
        for slide_info in processed_result['slides']:
            slides_data.append({
                'slide_number': slide_info['slide_number'],
                'text': slide_info['processed_text'],
                'image_path': image_paths[slide_info['slide_number'] - 1] if slide_info['slide_number'] - 1 < len(image_paths) else None,
                'has_math_objects': slide_info['has_math_objects']
            })
    
    return slides_data



def extract_lecture_slides(file):
    """Handler function for extracting slides from PowerPoint"""
    if file:
        slides_data = extract_slides_from_pptx(file)
        if slides_data:
            slides_text = []
            total_math_slides = 0
            
            for i, slide in enumerate(slides_data):
                slide_num = slide['slide_number']
                text_preview = slide['text'][:100] + "..." if len(slide['text']) > 100 else slide['text']
                
                # Th√™m th√¥ng tin v·ªÅ c√¥ng th·ª©c to√°n h·ªçc
                if slide.get('has_math_objects', False):
                    slides_text.append(f"Slide {slide_num}: {text_preview} [üìê C√≥ c√¥ng th·ª©c to√°n h·ªçc]")
                    total_math_slides += 1
                else:
                    slides_text.append(f"Slide {slide_num}: {text_preview}")
            
            # Th√™m th·ªëng k√™
            summary = f"\n\nüìä Th·ªëng k√™: {len(slides_data)} slides, {total_math_slides} slides c√≥ c√¥ng th·ª©c to√°n h·ªçc"
            if total_math_slides > 0:
                summary += "\n‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát v√† c√¥ng th·ª©c to√°n h·ªçc!"
            
            return "\n\n".join(slides_text) + summary
    return "‚ùå Vui l√≤ng ch·ªçn file PowerPoint!"

def set_lecture_fast_mode():
    """Set fast mode preset for lecture generation"""
    return 256, 'crop', False, 6, False, 0

def create_lecture_input_interface():
    """T·∫°o giao di·ªán input cho lecture"""
    
    with gr.Row().style(equal_height=False):
        with gr.Column(variant='panel'):
            # Source image upload
            gr.Markdown("### üë®‚Äçüè´ ·∫¢nh Gi√°o Vi√™n")
            lecture_source_image = gr.Image(label="·∫¢nh khu√¥n m·∫∑t gi√°o vi√™n", source="upload", type="filepath", elem_id="lecture_source_image").style(width=512)
            
            # PowerPoint file upload
            gr.Markdown("### üìä File PowerPoint B√†i Gi·∫£ng")
            lecture_pptx_file = gr.File(
                label="Ch·ªçn file PowerPoint (.pptx)",
                file_types=[".pptx"],
                elem_id="lecture_pptx_file"
            )
            
            # Language selection
            lecture_audio_language = gr.Dropdown(
                choices=["vi", "en", "zh", "ja", "ko", "fr", "de", "es", "it", "pt"],
                value="vi",
                label="Ng√¥n ng·ªØ gi·∫£ng b√†i",
                elem_id="lecture_audio_language"
            )
            
            # Preview extracted slides
            gr.Markdown("### üìù N·ªôi dung t·ª´ PowerPoint")
            lecture_slides_preview = gr.Textbox(
                label="N·ªôi dung ƒë√£ tr√≠ch xu·∫•t t·ª´ c√°c slide",
                lines=8,
                interactive=False,
                elem_id="lecture_slides_preview"
            )
            
            # Extract slides button
            extract_lecture_slides_btn = gr.Button(
                'üìÇ Tr√≠ch xu·∫•t n·ªôi dung t·ª´ PowerPoint',
                elem_id="extract_lecture_slides_btn",
                variant='secondary'
            )
            
            # Generate lecture video button
            generate_lecture_btn = gr.Button(
                'üé¨ T·∫°o Video B√†i Gi·∫£ng',
                elem_id="generate_lecture_btn",
                variant='primary'
            )
            
            # Status
            lecture_status = gr.Textbox(
                label="Tr·∫°ng th√°i x·ª≠ l√Ω",
                interactive=False,
                elem_id="lecture_status"
            )
        
        with gr.Column(variant='panel'):
            # Settings
            with gr.Tabs(elem_id="lecture_settings"):
                with gr.TabItem('‚öôÔ∏è C√†i ƒë·∫∑t'):
                    gr.Markdown("C√†i ƒë·∫∑t cho video b√†i gi·∫£ng")
                    with gr.Column(variant='panel'):
                        lecture_pose_style = gr.Slider(minimum=0, maximum=46, step=1, label="Pose style", value=0)
                        lecture_size_of_image = gr.Radio([256, 512], value=256, label='ƒê·ªô ph√¢n gi·∫£i ·∫£nh', info="256 = Nhanh, 512 = Ch·∫•t l∆∞·ª£ng cao")
                        lecture_preprocess_type = gr.Radio(['crop', 'resize','full', 'extcrop', 'extfull'], value='crop', label='X·ª≠ l√Ω ·∫£nh', info="crop = Nhanh nh·∫•t")
                        lecture_is_still_mode = gr.Checkbox(label="Still Mode (√≠t chuy·ªÉn ƒë·ªông ƒë·∫ßu)")
                        lecture_batch_size = gr.Slider(label="Batch size", step=1, maximum=10, value=6, info="TƒÉng l√™n 6-8 ƒë·ªÉ nhanh h∆°n")
                        lecture_enhancer = gr.Checkbox(label="GFPGAN l√†m Face enhancer (ch·∫≠m h∆°n)")
                        
                        # Fast mode preset button
                        lecture_fast_mode_btn = gr.Button(
                            '‚ö° Ch·∫ø ƒë·ªô nhanh (256px, batch=6, kh√¥ng enhancer)',
                            elem_id="lecture_fast_mode_btn",
                            variant='secondary'
                        )
                        
                        lecture_fast_mode_btn.click(
                            fn=set_lecture_fast_mode,
                            outputs=[lecture_size_of_image, lecture_preprocess_type, lecture_is_still_mode, lecture_batch_size, lecture_enhancer, lecture_pose_style]
                        )
            
            # Results placeholder (will be connected to output module)
            with gr.Tabs(elem_id="lecture_results"):
                gr.Markdown("### üé¨ Video B√†i Gi·∫£ng")
                lecture_final_video = gr.Video(label="Video b√†i gi·∫£ng ho√†n ch·ªânh", format="mp4").style(width=512)
                
                gr.Markdown("### üìä Th√¥ng tin Video")
                lecture_info = gr.Textbox(
                    label="Th√¥ng tin chi ti·∫øt",
                    lines=4,
                    interactive=False,
                    elem_id="lecture_info"
                )
    
    # Event handlers
    extract_lecture_slides_btn.click(
        fn=extract_lecture_slides,
        inputs=[lecture_pptx_file],
        outputs=[lecture_slides_preview]
    )
    
    # Return all components for connection with output module
    return {
        'source_image': lecture_source_image,
        'pptx_file': lecture_pptx_file,
        'audio_language': lecture_audio_language,
        'slides_preview': lecture_slides_preview,
        'extract_btn': extract_lecture_slides_btn,
        'generate_btn': generate_lecture_btn,
        'status': lecture_status,
        'pose_style': lecture_pose_style,
        'size_of_image': lecture_size_of_image,
        'preprocess_type': lecture_preprocess_type,
        'is_still_mode': lecture_is_still_mode,
        'batch_size': lecture_batch_size,
        'enhancer': lecture_enhancer,
        'fast_mode_btn': lecture_fast_mode_btn,
        'final_video': lecture_final_video,
        'info': lecture_info
    }
