#!/usr/bin/env python3
"""
Test ch·ªâ ki·ªÉm tra voice synthesis kh√¥ng ph·ª• thu·ªôc gradio
"""

import os
import sys
sys.path.append('.')

def test_voice_only():
    print("üîç Testing voice synthesis only...")
    
    try:
        # Import tr·ª±c ti·∫øp t·ª´ voice modules
        from src.voice.store import has_voice, load_profile
        from src.voice.tts_engine import synthesize
        
        user_id = "current_user"
        voice_id = "myVoice"
        test_text = "Xin ch√†o c√°c em."
        
        print(f"Checking voice: {voice_id}")
        
        if not has_voice(user_id, voice_id):
            print(f"‚ùå Voice not found: {voice_id}")
            return False
        
        print(f"‚úÖ Voice found: {voice_id}")
        
        # L·∫•y th√¥ng tin voice
        emb, meta = load_profile(user_id, voice_id)
        voice_language = meta.get('lang_hint', 'vi')
        model_type = meta.get('model_type', 'unknown')
        
        print(f"üåê Voice language: {voice_language}")
        print(f"ü§ñ Model type: {model_type}")
        
        # Test synthesize
        print("üé§ Testing synthesize...")
        result = synthesize(test_text, user_id, voice_id, voice_language)
        
        if result and os.path.exists(result):
            print(f"‚úÖ Synthesize success: {result}")
            return True
        else:
            print(f"‚ùå Synthesize failed: {result}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_voice_only()
    print(f"\nResult: {'‚úÖ Success' if success else '‚ùå Failed'}")

