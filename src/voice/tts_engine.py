import soundfile as sf, torch
import os
from .store import load_profile
from .enrollment import load_xtts

def synthesize(text: str, user_id: str, voice_id: str,
               lang: str = "vi", speed: float = 1.0,
               out_path: str = "data/tmp/voice_out.wav"):
    
    # Language handling for XTTS compatibility
    def get_xtts_language(lang_code):
        """Get XTTS language - XTTS kh√¥ng support ti·∫øng Vi·ªát n√™n d√πng English"""
        if lang_code.lower() in ['vi', 'vi-vn']:
            # XTTS kh√¥ng support ti·∫øng Vi·ªát, d√πng English ƒë·ªÉ gi·ªØ gi·ªçng clone
            print(f"üåê XTTS kh√¥ng support ti·∫øng Vi·ªát, d√πng English ƒë·ªÉ gi·ªØ gi·ªçng clone")
            return 'en'
        else:
            # C√°c ng√¥n ng·ªØ kh√°c gi·ªØ nguy√™n
            return lang_code.lower()
    
    # Get XTTS language - XTTS d√πng English, gTTS d√πng ti·∫øng Vi·ªát
    xtts_lang = get_xtts_language(lang)
    print(f"üåê Language for XTTS: {xtts_lang} (XTTS d√πng English, gTTS d√πng {lang})")
    try:
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(os.path.dirname(out_path), exist_ok=True)
        
        model, model_type = load_xtts()
        emb, meta = load_profile(user_id, voice_id)
        
        # Ki·ªÉm tra lo·∫°i model ƒë·ªÉ quy·∫øt ƒë·ªãnh c√°ch synthesize
        if model_type in ["xtts_v2", "xtts_v2_api"]:
            # XTTS v2 c√≥ th·ªÉ s·ª≠ d·ª•ng speaker_embedding
            print(f"üé§ {model_type}: Synthesizing with speaker embedding")
            
            # Ki·ªÉm tra xem model c√≥ method tts kh√¥ng
            if not hasattr(model, 'tts'):
                print("‚ùå Model doesn't have 'tts' method - checkpoint loading may have failed")
                print("üîÑ Falling back to gTTS...")
                # Fallback v·ªÅ gTTS
                try:
                    from gtts import gTTS
                    import tempfile
                    
                    # T·∫°o file t·∫°m
                    temp_file = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)
                    temp_path = temp_file.name
                    temp_file.close()
                    
                    # S·ª≠ d·ª•ng gTTS
                    tts = gTTS(text=text, lang=lang, slow=False)
                    tts.save(temp_path)
                    
                    # Convert to numpy array
                    audio, sr = sf.read(temp_path)
                    
                    # Clean up
                    os.unlink(temp_path)
                    
                    wav = audio
                    print("‚úÖ gTTS fallback successful")
                    
                except Exception as gtts_error:
                    print(f"‚ùå gTTS fallback also failed: {gtts_error}")
                    return None
            else:
                # Th·ª≠ c√°c ph∆∞∆°ng ph√°p TTS kh√°c nhau
                wav = None
                
                # Method 1: Speaker embedding v·ªõi speaker parameter
                if emb is not None:
                    try:
                        print("üîÑ Trying speaker embedding with speaker parameter...")
                        # XTTS c·∫ßn speaker ID ƒë√∫ng format, th·ª≠ v·ªõi 'speaker' parameter
                        wav = model.tts(text=text, speaker=voice_id, speaker_embedding=emb,
                                        language=xtts_lang, speed=speed)
                        if wav is not None:
                            print("‚úÖ Speaker embedding with speaker parameter successful")
                        else:
                            print("‚ö†Ô∏è Speaker embedding with speaker parameter failed: 'myVoice'")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Speaker embedding with speaker parameter failed: {e}")
                
                # Method 2: Speaker parameter tr·ª±c ti·∫øp (th·ª≠ v·ªõi speaker ID kh√°c)
                if wav is None:
                    try:
                        print(f"üîÑ Trying with speaker parameter: {voice_id}")
                        # Th·ª≠ v·ªõi speaker ID kh√°c n·∫øu c√≥
                        wav = model.tts(text=text, speaker=voice_id, language=xtts_lang, speed=speed)
                        if wav is not None:
                            print("‚úÖ Speaker parameter successful")
                        else:
                            print("‚ö†Ô∏è Speaker parameter failed: 'myVoice'")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Speaker parameter failed: {e}")
                
                # Method 3: Speaker_wav t·ª´ voice profile
                if wav is None:
                    try:
                        sample_audio_path = meta.get('sample_audio')
                        if sample_audio_path and os.path.exists(sample_audio_path):
                            print(f"üîÑ Trying speaker_wav: {sample_audio_path}")
                            # Convert sample audio to 16kHz mono if needed
                            try:
                                import subprocess
                                temp_16k_path = sample_audio_path.replace('.wav', '_16k_mono.wav')
                                
                                # Use FFmpeg to convert to 16kHz mono
                                cmd = [
                                    'ffmpeg', '-y',
                                    '-i', sample_audio_path,
                                    '-ac', '1',  # Mono
                                    '-ar', '16000',  # 16kHz
                                    '-sample_fmt', 's16',  # 16-bit PCM
                                    temp_16k_path
                                ]
                                
                                result = subprocess.run(cmd, capture_output=True, text=True)
                                
                                if result.returncode == 0 and os.path.exists(temp_16k_path):
                                    print(f"üîß Converted sample audio to 16kHz mono: {temp_16k_path}")
                                    wav = model.tts(text=text, speaker_wav=temp_16k_path, language=xtts_lang, speed=speed)
                                    # Clean up temp file
                                    try:
                                        os.unlink(temp_16k_path)
                                    except:
                                        pass
                                else:
                                    print(f"‚ö†Ô∏è Sample audio conversion failed, using original")
                                    wav = model.tts(text=text, speaker_wav=sample_audio_path, language=xtts_lang, speed=speed)
                                    
                            except Exception as convert_error:
                                print(f"‚ö†Ô∏è Sample audio conversion failed: {convert_error}, using original")
                                wav = model.tts(text=text, speaker_wav=sample_audio_path, language=xtts_lang, speed=speed)
                            
                            if wav is not None:
                                print("‚úÖ Speaker_wav successful")
                        else:
                            print("‚ö†Ô∏è No sample audio found in voice profile")
                            print(f"üîç Available metadata keys: {list(meta.keys()) if meta else 'None'}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Speaker_wav failed: {e}")
                        import traceback
                        traceback.print_exc()
                
                # Method 4: Kh√¥ng c√≥ speaker (default voice)
                if wav is None:
                    try:
                        print("üîÑ Trying without speaker...")
                        wav = model.tts(text=text, language=xtts_lang, speed=speed)
                        if wav is not None:
                            print("‚úÖ Default voice successful")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Default voice failed: {e}")
                
                # Method 5: Fallback v·ªÅ gTTS v·ªõi format chu·∫©n PCM 16-bit
                if wav is None:
                    print("üîÑ All XTTS methods failed, falling back to gTTS with PCM 16-bit format...")
                    try:
                        from gtts import gTTS
                        import tempfile
                        import subprocess
                        
                        # T·∫°o file t·∫°m MP3 tr∆∞·ªõc
                        with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
                            temp_mp3 = temp_file.name
                        
                        # S·ª≠ d·ª•ng gTTS ƒë·ªÉ t·∫°o MP3 v·ªõi language g·ªëc (ti·∫øng Vi·ªát)
                        print(f"üé§ gTTS fallback: S·ª≠ d·ª•ng language '{lang}' ƒë·ªÉ gi·ªØ ti·∫øng Vi·ªát")
                        tts = gTTS(text=text, lang=lang, slow=False)
                        tts.save(temp_mp3)
                        
                        # Convert MP3 sang WAV 16kHz mono PCM s16 v·ªõi padding
                        temp_wav = temp_mp3.replace('.mp3', '_16k_mono_pcm.wav')
                        
                        try:
                            # S·ª≠ d·ª•ng FFmpeg ƒë·ªÉ convert format chu·∫©n PCM 16-bit
                            cmd = [
                                'ffmpeg', '-y',
                                '-i', temp_mp3,
                                '-ac', '1',  # Mono
                                '-ar', '16000',  # 16kHz
                                '-sample_fmt', 's16',  # 16-bit PCM (kh√¥ng ph·∫£i float)
                                '-af', 'apad=pad_dur=0.5',  # Pad 0.5s ƒë·ªÉ ƒë·ªß frame
                                '-f', 'wav',  # √âp format WAV
                                temp_wav
                            ]
                            
                            print(f"üîÑ Converting to PCM 16-bit format: {' '.join(cmd)}")
                            result = subprocess.run(cmd, capture_output=True, text=True)
                            
                            if result.returncode == 0 and os.path.exists(temp_wav):
                                # ƒê·ªçc WAV ƒë√£ convert
                                audio, sr = sf.read(temp_wav)
                                wav = audio
                                print("‚úÖ gTTS fallback with PCM 16-bit format successful")
                                print(f"üîß Audio format: {sr}Hz, {len(audio)} samples, mono, PCM 16-bit")
                                
                                # Verify audio format
                                if sr == 16000 and len(audio.shape) == 1:
                                    print("‚úÖ Audio format verified: 16kHz mono")
                                else:
                                    print(f"‚ö†Ô∏è Audio format mismatch: {sr}Hz, shape: {audio.shape}")
                                
                            else:
                                # Fallback n·∫øu FFmpeg th·∫•t b·∫°i
                                print(f"‚ö†Ô∏è FFmpeg conversion failed: {result.stderr}")
                                print("üîÑ Falling back to direct MP3 reading")
                                audio, sr = sf.read(temp_mp3)
                                wav = audio
                                print("‚úÖ gTTS fallback successful (MP3 format)")
                        
                        except Exception as convert_error:
                            print(f"‚ö†Ô∏è Format conversion failed: {convert_error}")
                            # Fallback v·ªÅ ƒë·ªçc MP3 tr·ª±c ti·∫øp
                            audio, sr = sf.read(temp_mp3)
                            wav = audio
                            print("‚úÖ gTTS fallback successful (MP3 format)")
                        
                        # Clean up
                        try:
                            os.unlink(temp_mp3)
                            if os.path.exists(temp_wav):
                                os.unlink(temp_wav)
                        except:
                            pass
                        
                    except Exception as gtts_error:
                        print(f"‚ùå Even gTTS failed: {gtts_error}")
                        return None
                
        elif model_type == "gtts":
            # gTTS wrapper
            print("üé§ gTTS: Synthesizing with language hint")
            wav = model.tts(text=text, language=lang, speed=speed)
            
        else:
            # Tacotron2 ho·∫∑c model kh√°c
            print(f"Warning: Using {model_type} model. Voice cloning not available.")
            try:
                # Th·ª≠ v·ªõi language parameter
                wav = model.tts(text=text, speaker=model.speakers[0] if hasattr(model, 'speakers') else None,
                                language=lang)
            except Exception as e:
                print(f"‚ö†Ô∏è Language parameter failed, trying without: {e}")
                # Th·ª≠ kh√¥ng c√≥ language parameter
                wav = model.tts(text=text, speaker=model.speakers[0] if hasattr(model, 'speakers') else None)
        
        if wav is None:
            print("‚ùå TTS returned None")
            return None
            
        sf.write(out_path, wav, 24000)
        print(f"‚úÖ Audio saved to: {out_path}")
        return out_path
        
    except Exception as e:
        print(f"‚ùå Error in synthesize: {str(e)}")
        return None
